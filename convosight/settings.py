"""
Django settings for convosight project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging
import os
import socket
import sys
import time
import datetime


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def _env(key, default=None, cast_func=str):
    key = 'CV_%s' % key
    value = os.getenv(key)
    if value is None:
        print("[WARNING] EnvVar (%s) missing; Default: %s" % (key, default))
        return default
    return cast_func(value)


def cast_bool(value):
    if value == '1':
        return True
    return False


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = _env('SECRET_KEY', 'foobar')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _env('DEBUG', default=False, cast_func=cast_bool)


ALLOWED_HOSTS = [
    'localhost',
    'localhost:8000'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'rest_framework',
    'rest_framework_swagger',

    'convosight.accounts.apps.AccountsConfig',
    'convosight.address.apps.AddressConfig',
    'convosight.booking.apps.BookingConfig',
    'convosight.cinema.apps.CinemaConfig',
    'convosight.common.apps.CommonConfig',
    'convosight.movie.apps.MovieConfig',
    'convosight.payment.apps.PaymentConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'convosight.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'convosight.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DEFAULT_DB = str(os.path.join(BASE_DIR, 'db.sqlite3'))

DATABASES = {
    'default': {
        'ENGINE': _env(
            'DATABASE_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': _env('DATABASE_NAME', DEFAULT_DB),
        'USER': _env('DATABASE_USER'),
        'HOST': _env('DATABASE_HOST'),
        'PORT': _env('DATABASE_PORT'),
        'PASSWORD': _env('DATABASE_PASSWORD'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR + '/static/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

LOG_HANDLERS = ['file']
HOSTNAME = socket.gethostname()

LOG_FORMAT = ('{levelname} {name} - {message} [{filename}:{lineno}]')

ASC_TIME = ('{asctime}')

if DEBUG:
    LOG_HANDLERS = ['console', 'file']


class UTCFormatter(logging.Formatter):
    "Convert time to UTC."

    converter = time.gmtime


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'DEBUG',
        'handlers': ['console', 'file'],
    },
    'formatters': {
        'verbose': {
            '()': UTCFormatter,
            'format': '[{asctime}] [{hostname}] {base_fmt}'.format(
                asctime=ASC_TIME, hostname=HOSTNAME, base_fmt=LOG_FORMAT),  # noqa
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        # 'special': {
        #     '()': 'logging.SpecialFilter',
        #     # 'foo': 'bar',
        # },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
            # 'filters': ['require_debug_true', 'require_debug_false']
        },
        'console_simple': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'simple'
        },
        'file': {
            "class": "logging.NullHandler",
        },
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django': {
            'level': 'WARNING',
            'handlers': LOG_HANDLERS,
            'propagate': False,
        },
        # Silence invalid allowed host requests
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
        'migrations': {
            'level': 'INFO',
            'handlers': ['console_simple'],
            'propagate': False,
        },
        'boto': {
            'level': 'INFO',
            'handlers': LOG_HANDLERS,
            'propagate': False,
        },
        'botocore': {
            'level': 'INFO',
            'handlers': LOG_HANDLERS,
            'propagate': False,
        },
        'boto3': {
            'level': 'INFO',
            'handlers': LOG_HANDLERS,
            'propagate': False,
        },
        'factory': {
            'level': 'WARN',
            'handlers': LOG_HANDLERS,
            'propagate': False,
        }
    },
}

use_file_handler = _env('USE_LOG_FILE_HANDLER', default=False, cast_func=cast_bool) # noqa
if use_file_handler:
    LOGGING['handlers']['file'] = {
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': _env('LOG_FILE'),
        'formatter': 'verbose',
        'maxBytes': 1024 * 1024 * 100,
        'backupCount': 5,
    }


# CORS Setup
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ORIGIN_WHITELIST = (
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

CORS_PREFLIGHT_MAX_AGE = 86400
CORS_REPLACE_HTTPS_REFERER = True

# AUTH USER MODEL
AUTH_USER_MODEL = "accounts.User"

# REST FRAMEWORK SETTINGS
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # NOQA
    'PAGE_SIZE': 10
}

PAGE_SIZE = 9

JWT_AUTH = {
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}


# Input Date Time Format

TIME_FORMAT = '%H:%M'
INPUT_TIME_FORMAT = ['%H:%M', ]

GLOBAL_DATE_FORMAT = '%b %d, %Y'
INPUT_DATE_FORMATS = ['%d/%m/%Y', '%b %d, %Y', '%B %d, %Y', '%m/%d/%Y']
